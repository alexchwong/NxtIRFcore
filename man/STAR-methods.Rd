% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/STAR_utils.R
\name{STAR-methods}
\alias{STAR-methods}
\alias{STAR_buildRef}
\alias{STAR_align_experiment}
\alias{STAR_align_fastq}
\alias{STAR_version}
\alias{STAR_Mappability}
\title{STAR wrapper for building reference for STAR, and aligning raw
sequence (FASTQ or FASTA) files.}
\usage{
STAR_version()

STAR_buildRef(
  reference_path,
  STAR_ref_path = file.path(reference_path, "STAR"),
  also_generate_mappability = TRUE,
  map_depth_threshold = 4,
  sjdbOverhang = 149,
  n_threads = 4,
  additional_args = NULL,
  ...
)

STAR_Mappability(
  reference_path,
  STAR_ref_path = file.path(reference_path, "STAR"),
  map_depth_threshold = 4,
  n_threads = 4,
  ...
)

STAR_align_experiment(
  Experiment,
  STAR_ref_path,
  BAM_output_path,
  trim_adaptor = "AGATCGGAAG",
  two_pass = FALSE,
  n_threads = 4
)

STAR_align_fastq(
  fastq_1 = c("./sample_1.fastq"),
  fastq_2 = NULL,
  STAR_ref_path,
  BAM_output_path,
  two_pass = FALSE,
  trim_adaptor = "AGATCGGAAG",
  memory_mode = "NoSharedMemory",
  additional_args = NULL,
  n_threads = 4
)
}
\arguments{
\item{reference_path}{The path to the reference.
\code{GetReferenceResource()} must first be run using this path
as its \code{reference_path}}

\item{STAR_ref_path}{(Default - the "STAR" subdirectory under
\code{reference_path}) The directory containing the STAR reference to be
used or to contain the newly-generated STAR reference}

\item{also_generate_mappability}{Whether \code{STAR_buildRef()} also
calculates Mappability Exclusion regions.}

\item{map_depth_threshold}{(Default 4) The depth of mapped reads
threshold at or below which Mappability exclusion regions are defined. See
\link{Mappability-methods}.
Ignored if \code{also_generate_mappability = FALSE}}

\item{sjdbOverhang}{(Default = 149) A STAR setting indicating the length of
the donor / acceptor sequence on each side of the junctions. Ideally equal
to (mate_length - 1). As the most common read length is 150, the default
of this function is 149. See the STAR aligner manual for details.}

\item{n_threads}{The number of threads to run the STAR aligner.}

\item{additional_args}{A character vector of additional arguments to be
parsed into STAR. See examples below.}

\item{...}{Additional arguments to be parsed into
\code{Mappability_GenReads()}. See \link{Mappability-methods}.}

\item{Experiment}{A two or three-column data frame with the columns denoting
sample names, forward-FASTQ and reverse-FASTQ files. This can be
conveniently generated using \code{Find_FASTQ()}}

\item{BAM_output_path}{The path under which STAR outputs the aligned BAM
files. In \code{STAR_align_experiment()}, STAR will output aligned
BAMS inside subdirectories of this folder, named by sample names. In
\code{STAR_align_fastq()}, STAR will output directly into this path.}

\item{trim_adaptor}{The sequence of the Illumina adaptor to trim via STAR's
\code{--clip3pAdapterSeq} option}

\item{two_pass}{Whether to use two-pass mapping. In
\code{STAR_align_experiment()}, STAR will first align every sample
and generate a list of splice junctions but not BAM files. The junctions
are then given to STAR to generate a temporary genome (contained within
\code{_STARgenome}) subdirectory within that of the first sample), using
these junctions to improve novel junction detection. In
\code{STAR_align_fastq()}, STAR will run \code{--twopassMode Basic}}

\item{fastq_1, fastq_2}{In STAR_align_fastq: character vectors giving the
path(s) of one or more FASTQ (or FASTA) files to be aligned.
If single reads are to be aligned, omit \code{fastq_2}}

\item{memory_mode}{The parameter to be parsed to \code{--genomeLoad}; either
\code{NoSharedMemory} or \code{LoadAndKeep} are used.}
}
\value{
None. STAR will output files into the given output directories.
}
\description{
These functions run the STAR aligner to build a STAR genome reference,
(optionally) calculate mappability exclusion regions, and align one or more
FASTQ files (single or paired) to the generated genome. These functions only
work on Linux-based systems with STAR installed. STAR must be
accessible via $PATH
}
\section{Functions}{
\itemize{
\item \code{STAR_version}: Checks whether STAR is installed, and its version

\item \code{STAR_buildRef}: Creates a STAR genome reference

\item \code{STAR_Mappability}: Full pipeline for calculation of mappability
exclusion zone calculation, with given reference. Requires STAR and a 
valid STAR reference.
Also requires GetReferenceResource() to have been run.

\item \code{STAR_align_experiment}: Aligns multiple sets of FASTQ files, separated by
sample names

\item \code{STAR_align_fastq}: Aligns a single sample (with single or paired FASTQ
or FASTA files)
}}

\examples{
\dontrun{

# The below workflow illustrates
# 0) Check that STAR is installed and compatible with NxtIRF
# 1) Getting the reference resource, including Mappability reads generation
# 2) Building the STAR Reference, including Mappability Exclusion calculation
# 3) Building the NxtIRF Reference, using the Mappability Exclusion file
# 4) Aligning (a) one or (b) multiple raw sequencing samples.


# 0) Check that STAR is installed and compatible with NxtIRF

STAR_version()

# 1) Reference generation from Ensembl's FTP links
#     Additionally generates reads for Mappability calculation

FTP = "ftp://ftp.ensembl.org/pub/release-94/"

GetReferenceResource(
    reference_path = "Reference_FTP",
    fasta = paste0(FTP, "fasta/homo_sapiens/dna/",
        "Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz"), 
    gtf = paste0(FTP, "gtf/homo_sapiens/",
        "Homo_sapiens.GRCh38.94.chr.gtf.gz"), 
    generate_mappability_reads = TRUE
)

# 2) Generates STAR genome within the NxtIRF reference. Also generates
#     mappability exclusion BED file

STAR_buildRef(reference_path = "Reference_FTP", n_threads = 32,
    also_generate_mappability = TRUE)

# 2 alt) Generates STAR genome of the example NxtIRF mock genome.
#     This demonstrates using custom STAR parameters, as the mock
#     genome is ~100k in length, so --genomeSAindexNbases needs to be
#     adjusted to be min(14, log2(GenomeLength)/2 - 1)

GetReferenceResource(
    reference_path = "Reference_chrZ",
    fasta = mock_genome(),
    gtf =  = mock_gtf(), 
    generate_mappability_reads = TRUE
)

STAR_buildRef(reference_path = "Reference_chrZ", n_threads = 32,
    additional_args = c("--genomeSAindexNbases", "7")
    also_generate_mappability = TRUE)

# 3) Build NxtIRF reference using the newly-generated Mappability exclusions

BuildReference(reference_path = "Reference_FTP")

# 4a) Align a single sample using the STAR reference

STAR_align_fastq(
    STAR_ref_path = file.path("Reference_FTP", "STAR"),
    BAM_output_path = "./bams/sample1",
    fastq_1 = "sample1_1.fastq", fastq_2 = "sample1_2.fastq",
    n_threads = 8
)

# 4b) Align multiple samples, using two-pass alignment

Experiment = data.frame(
    sample = c("sample_A", "sample_B"),
    forward = file.path("raw_data", c("sample_A", "sample_B"),
        c("sample_A_1.fastq", "sample_B_1.fastq")),
    reverse = file.path("raw_data", c("sample_A", "sample_B"),
        c("sample_A_2.fastq", "sample_B_2.fastq"))
)

STAR_align_experiment(
    Experiment = Experiment,
    STAR_ref_path = file.path("Reference_FTP", "STAR"),
    BAM_output_path = "./bams",
    two_pass = TRUE, 
    n_threads = 8
)

}
}
\seealso{
\link{BuildReference} for \code{GetReferenceResource()}\cr\cr
\link{Find_Samples} for \code{Find_FASTQ()}\cr\cr
\link{Mappability-methods} for \code{Mappability_GenReads()}\cr\cr
\href{https://github.com/alexdobin/STAR/blob/master/doc/STARmanual.pdf}{The latest STAR documentation}
}
