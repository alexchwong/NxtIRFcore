% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Coverage.R
\name{Coverage}
\alias{Coverage}
\alias{GetCoverage}
\alias{GetCoverageRegions}
\alias{GetCoverage_DF}
\title{Calls NxtIRF's C++ function to retrieve coverage from a COV file}
\usage{
GetCoverage(file, seqname = "", start = 0, end = 0, strand = c("*", "+", "-"))

GetCoverageRegions(
  file,
  regions,
  strandmode = c("unstranded", "forward", "reverse")
)

GetCoverage_DF(
  file,
  seqname = "",
  start = 0,
  end = 0,
  strand = c("*", "+", "-")
)
}
\arguments{
\item{file}{(Required) The file name of the COV file}

\item{seqname}{(Required for \code{GetCoverage_DF}) A string denoting the
chromosome name. If left blank in \code{GetCoverage}, retrieves RLEList
containing coverage of the entire file.}

\item{start, end}{1-based genomic coordinates. If \code{start = 0} and
\code{end = 0}, will retrieve RLE of specified chromosome.}

\item{strand}{Either "*", "+", or "-"}

\item{regions}{A GRanges object for a set of regions to obtain mean / total
coverage from the given COV file.}
}
\value{
For \code{GetCoverage}: If seqname is left as "", returns an RLEList of the
whole BAM file, with each RLE in the list containing coverage data for
one chromosome. Otherwise, returns an RLE containing coverage data for
the requested genomic region

For \verb{GetCoverage_DF: Returns a two-column data frame, with the first column }coordinate\verb{denoting genomic coordinate, and the second column}value`
containing the coverage depth for each coordinate nucleotide.

For \verb{GetCoverageRegions: Returns a GRanges object with two extra metacolumns: }cov_total\verb{gives the total coverage * nucleotide values, and}cov_mean`
gives the mean coverage.
}
\description{
This function returns an RLE / RLEList or data.frame
containing coverage data from the given COV file
}
\details{
COV files are generated by NxtIRF's \link{IRFinder} function. It records
alignment coverage for each nucleotide in the given BAM file. It stores this
data in "COV" format, which is an indexed BGZF-compressed format specialised
for the storage of unstranded and stranded alignment coverage in paired-end
sequencing.

These functions retrieves coverage data from the specified COV file. They
are computationally efficient as they utilise random-access to rapidly
search for the requested data from the COV file.
}
\section{Functions}{
\itemize{
\item \code{GetCoverage}: Retrieves alignment coverage as an RLE or RLElist

\item \code{GetCoverageRegions}: Retrieves total and mean coverage of a GRanges object
from a COV file

\item \code{GetCoverage_DF}: Retrieves alignment coverage as a data.frame
}}

\examples{
se <- NxtIRF_example_NxtSE()

cov_file <- covfile(se)[1]

# Retrieve Coverage as RLE

cov <- GetCoverage(cov_file, seqname = "chrZ", 
  start = 10000, end = 20000,
  strand = "*"
)

# Retrieve Coverage as data.frame

cov.df <- GetCoverage_DF(cov_file, seqname = "chrZ", 
  start = 10000, end = 20000,
  strand = "*"
)

# Plot coverage using ggplot:

require(ggplot2)
ggplot(cov.df, aes(x = coordinate, y = value)) + geom_line() + theme_white

# Export COV data as BigWig

cov_whole = GetCoverage(cov_file)
bw_file = file.path(tempdir(), "sample.bw")
rtracklayer::export(cov_whole, bw_file, "bw")

}
